{"ast":null,"code":"export default async function getCroppedImg64(imageSrc, pixelCrop, rotation = 0) {\n  const image = new Image();\n  image.src = imageSrc;\n  await new Promise(r => {\n    image.onload = r;\n  });\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  let canvasWidth, canvasHeight;\n  if (rotation === 90 || rotation === 270) {\n    canvasWidth = pixelCrop.height;\n    canvasHeight = pixelCrop.width;\n  } else {\n    canvasWidth = pixelCrop.width;\n    canvasHeight = pixelCrop.height;\n  }\n  canvas.width = canvasWidth;\n  canvas.height = canvasHeight;\n  if (rotation === 90 || rotation === 270) {\n    ctx.translate(canvasWidth / 2, canvasHeight / 2);\n    ctx.rotate(rotation * Math.PI / 180);\n    ctx.translate(-canvasWidth / 2, -canvasHeight / 2);\n  } else {\n    // Устанавливаем поворот\n    ctx.translate(canvasWidth / 2, canvasHeight / 2);\n    ctx.rotate(rotation * Math.PI / 180);\n    ctx.translate(-canvasWidth / 2, -canvasHeight / 2);\n  }\n  // Рассчитываем координаты вырезаемой области с учетом поворота\n  let cropX, cropY;\n  if (rotation === 90) {\n    cropX = pixelCrop.y;\n    cropY = image.height - pixelCrop.x - pixelCrop.width;\n  } else if (rotation === 180) {\n    cropX = image.width - pixelCrop.x - pixelCrop.width;\n    cropY = image.height - pixelCrop.y - pixelCrop.height;\n  } else if (rotation === 270) {\n    cropX = image.width - pixelCrop.y - pixelCrop.height;\n    cropY = pixelCrop.x;\n  } else {\n    cropX = pixelCrop.x;\n    cropY = pixelCrop.y;\n  }\n\n  // Рисуем изображение с учетом поворота и вырезаемой области\n  ctx.drawImage(image, cropX, cropY, pixelCrop.width, pixelCrop.height, 0, 0, pixelCrop.width, pixelCrop.height);\n\n  // Получаем данные изображения в формате base64\n  const base64Image = canvas.toDataURL('image/jpeg');\n\n  // Возвращаем строку base64\n  return base64Image;\n}","map":{"version":3,"names":["getCroppedImg64","imageSrc","pixelCrop","rotation","image","Image","src","Promise","r","onload","canvas","document","createElement","ctx","getContext","canvasWidth","canvasHeight","height","width","translate","rotate","Math","PI","cropX","cropY","y","x","drawImage","base64Image","toDataURL"],"sources":["/Users/khamzat/chesu/src/Components/getImage64.jsx"],"sourcesContent":["export default async function getCroppedImg64(imageSrc, pixelCrop, rotation = 0) {\n  const image = new Image();\n  image.src = imageSrc;\n  await new Promise(r => {\n    image.onload = r;\n  });\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  let canvasWidth, canvasHeight;\n  if (rotation === 90 || rotation === 270) {\n    canvasWidth = pixelCrop.height;\n    canvasHeight = pixelCrop.width;\n  } else {\n    canvasWidth = pixelCrop.width;\n    canvasHeight = pixelCrop.height;\n  }\n\n  canvas.width = canvasWidth;\n  canvas.height = canvasHeight;\n\n  if (rotation === 90 || rotation === 270) {\n    ctx.translate(canvasWidth / 2, canvasHeight / 2);\n    ctx.rotate((rotation * Math.PI) / 180);\n    ctx.translate(-canvasWidth / 2, -canvasHeight / 2);\n  } else {\n    // Устанавливаем поворот\n    ctx.translate(canvasWidth / 2, canvasHeight / 2);\n    ctx.rotate((rotation * Math.PI) / 180);\n    ctx.translate(-canvasWidth / 2, -canvasHeight / 2);\n  }\n  // Рассчитываем координаты вырезаемой области с учетом поворота\n  let cropX, cropY;\n  if (rotation === 90) {\n    cropX = pixelCrop.y;\n    cropY = image.height - pixelCrop.x - pixelCrop.width;\n  } else if (rotation === 180) {\n    cropX = image.width - pixelCrop.x - pixelCrop.width;\n    cropY = image.height - pixelCrop.y - pixelCrop.height;\n  } else if (rotation === 270) {\n    cropX = image.width - pixelCrop.y - pixelCrop.height;\n    cropY = pixelCrop.x;\n  } else {\n    cropX = pixelCrop.x;\n    cropY = pixelCrop.y;\n  }\n\n  // Рисуем изображение с учетом поворота и вырезаемой области\n  ctx.drawImage(\n    image,\n    cropX,\n    cropY,\n    pixelCrop.width,\n    pixelCrop.height,\n    0,\n    0,\n    pixelCrop.width,\n    pixelCrop.height\n  );\n\n  // Получаем данные изображения в формате base64\n  const base64Image = canvas.toDataURL('image/jpeg');\n\n  // Возвращаем строку base64\n  return base64Image;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}