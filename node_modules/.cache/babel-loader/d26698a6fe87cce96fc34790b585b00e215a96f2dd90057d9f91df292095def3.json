{"ast":null,"code":"import invariant from './utils/invariant';\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\n\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    const routes = state.routes.slice();\n    routes.push(route);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes\n    };\n  },\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes\n    };\n  },\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return {\n      ...state,\n      index\n    };\n  },\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1)\n    };\n  },\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n    const routes = state.routes.slice();\n    routes[index] = route;\n    return {\n      ...state,\n      index,\n      routes\n    };\n  },\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return {\n      ...state,\n      index: nextIndex,\n      routes\n    };\n  }\n};\nexport default StateUtils;","map":{"version":3,"names":["invariant","StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","nextIndex","nextState","reset","Array","isArray","undefined","compare","ii","every"],"sources":["/Users/khamzat/Desktop/ChesuFront/node_modules/@react-navigation/core/lib/module/StateUtils.js"],"sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find((route) => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex((route) => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some((route) => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}